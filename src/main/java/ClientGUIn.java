import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.concurrent.TimeUnit;

/**
 * @author johan
 */
public class ClientGUIn extends JFrame {

    public Socket cs;
    public Client c;


    /**
     * Creates new form ClientGUIn
     */
    public ClientGUIn() {
        initComponents();
    }


    /*
        * This method is called from within the constructor to initialize the form.
        * WARNING: Do NOT modify this code. The content of this method is always
        * regenerated by the Form Editor.
        */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents

    private void initComponents() {

        Send_text_textfield = new java.awt.TextField();
        Send_button = new java.awt.Button();
        Connect_button = new java.awt.Button();
        Exit_button = new java.awt.Button();
        Port_textfield = new java.awt.TextField();
        IP_textfield = new java.awt.TextField();
        Chat_area = new java.awt.List();
        User_name_textfield = new java.awt.TextField();
        Clear_Chat_area = new java.awt.Button();
        Disconnect_button = new java.awt.Button();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");


        addWindowListener(new WindowAdapter(){
            public void windowOpened(WindowEvent e){
                Send_text_textfield.requestFocus();
            }
        });

        Send_text_textfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Send_buttonKeyPressed(evt);
            }
        });

        Send_text_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

                Send_text_textfieldActionPerformed(evt);

            }
        });

        Send_button.setLabel("Send");
        Send_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Send_buttonActionPerformed(evt);

            }
        });



        Connect_button.setLabel("Connect");
        Connect_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    Connect_buttonActionPerformed(evt);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        Exit_button.setLabel("Exit");
        Exit_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Exit_buttonActionPerformed(evt);
            }
        });

        Port_textfield.setText("1234");

        IP_textfield.setText("127.0.0.1");

        User_name_textfield.setText("UserName");
        User_name_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                User_name_textfieldActionPerformed(evt);
            }
        });

        Clear_Chat_area.setLabel("Clear chat");
        Clear_Chat_area.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Clear_Chat_areaActionPerformed(evt);
            }
        });

        Disconnect_button.setEnabled(false);
        Disconnect_button.setLabel("Disconnect");
        Disconnect_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try
                {
                    Disconnect_buttonActionPerformed(evt);
                } catch (IOException e)
                {
                    e.printStackTrace();
                } catch (InterruptedException e)
                {
                    e.printStackTrace();
                }
            }
        });
        
        
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Chat_area, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(112, 112, 112)
                                                .addComponent(IP_textfield, GroupLayout.PREFERRED_SIZE, 222, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(User_name_textfield, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(Disconnect_button, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(Port_textfield, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(Connect_button, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(Clear_Chat_area, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(Exit_button, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(Send_text_textfield, GroupLayout.PREFERRED_SIZE, 528, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Send_button, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(Connect_button, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Port_textfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(IP_textfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Exit_button, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(User_name_textfield, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Clear_Chat_area, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Disconnect_button, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Chat_area, GroupLayout.PREFERRED_SIZE, 444, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Send_text_textfield, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Send_button, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Send_text_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Send_text_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Send_text_textfieldActionPerformed

    private void Exit_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Exit_buttonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_Exit_buttonActionPerformed

    private void Connect_buttonActionPerformed(java.awt.event.ActionEvent evt) throws InterruptedException {//GEN-FIRST:event_Connect_buttonActionPerformed

        Integer port = Integer.parseInt((Port_textfield.getText()));
        String IP = IP_textfield.getText();
        String userName = User_name_textfield.getText();
        userName = User_name_textfield.getText();

        try {
            cs = new Socket(IP, port);
            ObjectOutputStream out = new ObjectOutputStream(cs.getOutputStream());
            ObjectInputStream in = new ObjectInputStream(cs.getInputStream());

            System.out.println("Connection successful!");
            //Chat_area.add("Connection successful");

            Client client = new Client();
            client.userName = userName;
            client.cs = cs;
            client.in = in;
            client.out = out;
            (new Thread(client)).start();
            this.c = client;

            //init client message
            String str = "joined the chat!";
            Message m = new Message(str, this.c.getUserName());
            m.setTimeStamp(new Date());
            this.c.setMessage(m);

            try {
                this.c.getOut().writeObject(this.c.getMessage());
            } catch (IOException e) {
                e.printStackTrace();
            }

            Disconnect_button.enable();
            Connect_button.disable();
            IP_textfield.disable();
            Port_textfield.disable();
            User_name_textfield.disable();

            System.out.println("Connecting to IP: " + IP + " on port: " + port + " as User: " + userName);
            //Chat_area.add("Connecting to IP: " + IP + " on port: " + port + " as User: " + userName);



        } catch (IOException ex) {
            Logger.getLogger(ClientGUIn.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_Connect_buttonActionPerformed

    private void Clear_Chat_areaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Clear_Chat_areaActionPerformed
        Chat_area.clear();
    }//GEN-LAST:event_Clear_Chat_areaActionPerformed

    private void Disconnect_buttonActionPerformed(java.awt.event.ActionEvent evt) throws IOException, InterruptedException
    {//GEN-FIRST:event_Disconnect_buttonActionPerformed

        Message message = new Message(c.getUserName() + " has left the conversation", c.getUserName());

        message.setTimeStamp(new Date());
        message.setIsExitMessage(true);

        Disconnect_button.disable();
        Connect_button.enable();
        IP_textfield.enable();
        Port_textfield.enable();
        User_name_textfield.enable();

        c.setMessage(message);
        c.getOut().writeObject(c.message);


    }//GEN-LAST:event_Disconnect_buttonActionPerformed

    private void Send_buttonKeyPressed(java.awt.event.KeyEvent evt) {
        String sendThisString = Send_text_textfield.getText();
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER)) {
            Send_text_textfield.setText("");
            Message m = new Message(sendThisString, this.c.getUserName());
            m.setTimeStamp(new Date());
            this.c.setMessage(m);

            try {
                this.c.getOut().writeObject(this.c.getMessage());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void Send_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Send_buttonActionPerformed
        String sendThisString = Send_text_textfield.getText();
        if (!sendThisString.equals("")) {
            Send_text_textfield.setText("");
            Message m = new Message(sendThisString, this.c.getUserName(), new Date());

            try {
                TimeUnit.SECONDS.sleep(0);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            this.c.setMessage(m);

            try {
                this.c.getOut().writeObject(this.c.getMessage());
            } catch (IOException e) {

            }
        }
    }//GEN-LAST:event_Send_buttonActionPerformed

    private void User_name_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_User_name_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_User_name_textfieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClientGUIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ClientGUIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ClientGUIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ClientGUIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGUIn().setVisible(true);

            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static java.awt.List Chat_area;

    public static java.awt.List getChatArea() {
        return Chat_area;
    }

    private java.awt.Button Clear_Chat_area;
    private java.awt.Button Connect_button;
    private java.awt.Button Disconnect_button;
    private java.awt.Button Exit_button;
    private java.awt.TextField IP_textfield;
    private java.awt.TextField Port_textfield;
    private java.awt.Button Send_button;
    private java.awt.TextField Send_text_textfield;
    private java.awt.TextField User_name_textfield;
    // End of variables declaration//GEN-END:variables
}
